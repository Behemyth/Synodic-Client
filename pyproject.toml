
[project]
description = ""
license = {text = "LGPLv2"}
name = "synodic_client"

authors = [
  {name = "Synodic Software", email = "contact@synodic.software"},
]
readme = "README.md"

dynamic = ["version"]

requires-python = ">=3.13,<3.14"

dependencies = [
  "pyside6>=6.8.1",
  "packaging>=24.2",
]

[project.urls]
homepage = "https://github.com/Synodic-Software/Synodic-Client"
repository = "https://github.com/Synodic-Software/Synodic-Client"

[dependency-groups]
lint = [
  "ruff>=0.8.1",
  "mypy>=1.13",
  "isort>=5.13.2",
]
test = [
  "pytest>=8.3.4",
  "pytest-cov>=6.0.0",
  "pytest-mock>=3.14.0",
]

[tool.pdm.options]
update = ["--update-all"]

[tool.pdm.scripts]
analyze = {shell = "ruff check synodic_client tests"}
build = {shell = "pyinstaller --clean synodic.spec"}
format = {shell = "ruff format"}
lint = {composite = ["analyze", "format", "sort-imports", "type-check"]}
sort-imports = {shell = "isort --check-only --diff --verbose ."}
test = {shell = "pytest --cov=synodic_client --verbose tests"}
type-check = {shell = "mypy ."}

# https://pdm-backend.fming.dev/build_config/#wheel-data-files
[tool.pdm.build.wheel-data]
data = [{path = "data/**/*", relative-to = "data/"}]

[project.gui-scripts]
synodic-client = "synodic_client.application.qt:application"

[tool.pytest.ini_options]
log_cli = true
testpaths = [
  "tests",
]

[tool.black]
line-length = 120
preview = true

[tool.isort]
profile = "black"

[tool.ruff]
line-length = 120
preview = true

[tool.ruff.lint]
ignore = [
  "D206",
  "D300",
  "D415",
  "E111",
  "E114",
  "E117",
]
select = [
  "D", # pydocstyle
  "F", # Pyflakes
  "I", # isort
  "PL", # pylint
  "UP", # pyupgrade
  "E", # pycodestyle
  "B", # flake8-bugbear
  "SIM", # flake8-simplify
  "PT", # flake8-pytest-style
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
docstring-code-format = true
indent-style = "space"
quote-style = "single"

[tool.coverage.report]
skip_empty = true

[build-system]
build-backend = "pdm.backend"
requires = ["pdm.backend"]
